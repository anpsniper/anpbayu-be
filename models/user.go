package models

import (
	"time"
)

// User represents a user in the system.
type User struct {
	ID        string    `json:"id"`
	Username  string    `json:"username"`
	Email     string    `json:"email"`
	Password  string    `json:"-"`              // Password should not be marshaled to JSON
	RoleID    string    `json:"role_id"`        // Foreign key to the roles table
	Role      *Role     `json:"role,omitempty"` // Embedded Role struct for eager loading, omitempty to exclude if nil
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// Post represents a blog post or an article.
type Post struct {
	ID        string    `json:"id"`
	UserID    string    `json:"user_id"`
	Title     string    `json:"title"`
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// Comment represents a comment on a post.
type Comment struct {
	ID        string    `json:"id"`
	PostID    string    `json:"post_id"`
	UserID    string    `json:"user_id"`
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// Session represents a user session.
type Session struct {
	ID        string    `json:"id"`
	UserID    string    `json:"user_id"`
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
	CreatedAt time.Time `json:"created_at"`
}

// NewUser creates a new User instance with default creation/update timestamps.
// It now includes a roleID parameter.
func NewUser(username, email, password, roleID string) *User {
	now := time.Now()
	return &User{
		ID:        "", // ID should be generated by the database/service
		Username:  username,
		Email:     email,
		Password:  password,
		RoleID:    roleID,
		CreatedAt: now,
		UpdatedAt: now,
	}
}

// NewPost creates a new Post instance with default creation/update timestamps.
func NewPost(userID, title, content string) *Post {
	now := time.Now()
	return &Post{
		ID:        "", // ID should be generated by the database/service
		UserID:    userID,
		Title:     title,
		Content:   content,
		CreatedAt: now,
		UpdatedAt: now,
	}
}

// NewComment creates a new Comment instance with default creation/update timestamps.
func NewComment(postID, userID, content string) *Comment {
	now := time.Now()
	return &Comment{
		ID:        "", // ID should be generated by the database/service
		PostID:    postID,
		UserID:    userID,
		Content:   content,
		CreatedAt: now,
		UpdatedAt: now,
	}
}

// NewSession creates a new Session instance with default creation timestamp and expiration.
func NewSession(userID, token string, expiresAt time.Time) *Session {
	now := time.Now()
	return &Session{
		ID:        "", // ID should be generated by the database/service
		UserID:    userID,
		Token:     token,
		ExpiresAt: expiresAt,
		CreatedAt: now,
	}
}
